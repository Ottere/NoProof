app = Flask(__name__) --> 모듈을 Flask로 인식시킴

플라스크 실행 (조건: 위 코드가 코드 내 존재해야함)
if __name__=="__main__":
    app.run(debug=True)

flask와 DB 연동

1. db 연결
app.config["SQLALCHEMY_DATABASE_URI"] = 'sqlite:///[DB이름.db]'   ---- sqlite3
app.config["SQLALCHEMY_DATABASE_URI"] = "mariadb+mariadbconnector://[유저명]:[비밀번호]@[ip 또는 주소]:[포트번호]/main?charset=utf8" --- MariaDB

2. table 연결
db = SQLAlchemy(app) --> flask와 sqlalchemy를 서로 연결

class [테이블이름](db.Model):
    __tablename__= [테이블이름]
    [컬럼명1] = db.Column(db.[데이터타입],primary_key=True)  --> PK가 설정된 행일 경우
    [컬럼명2] = db.Column(db.Integer) --> 데이터타입이 Int형인 경우
    [컬럼명3] = db.Column(db.String(10)) --> 데이터타입이 String(text)이고 길이가 10인 경우
    [컬럼명4] = db.Column(db.DateTime(timezone=True)) --> 데이터 타입이 날짜인 경우
    def __init__ (self,[컬럼명1],[컬럼명2][컬럼명3],[컬럼명4]):
        self.[컬럼명1]=[컬럼명1]
        self.[컬럼명2]=[컬럼명2]
        self.[컬럼명3]=[컬럼명3]
        self.[컬럼명4]=[컬럼명4]

3. 127.0.0.1/[주소] 설정하기
@app.route("/")  --> 기본 메인화면
def index():
    [해당 페이지에서 작동할 코드]

@app.route("/crawling") --> url이 127.0.0.1/crawling 일 경우 실행
def crapping():
    [해당 페이지에서 작동할 코드]

4. SQLAlchemy로 DB 데이터 제어하기
1. select 문
    [변수] = [테이블명].query.all() --> select * from [테이블 명]
    ex) all_data = tblErpTaxBillTrans.query.all() --> 모든값 가져옴
         all_data = tblErpTaxBillTrans.query.first() --> 첫번째 값만 가져옴
         all_data = tblErpTaxBillTrans.query.last() --> 마지막 값만 가져옴
2. where 문
    [변수] = [테이블명].query.filter([테이블명].[컬럼명] >=10).all() --> select * from [테이블 명]
    ex) ApprNoData=tblErpTaxBillTrans.query.filter(tblErpTaxBillTrans.HomeTaxApprNo==12345).first()
        --> tblErpTaxBillTrans테이블의 HomeTaxApprNo가 12345인 데이터 1개만 가지고 온다.
        log_data = tblsignup.query.filter(and_(tblsignup.UserEmail==Userid),(tblsignup.UserPassword==Userpass)).first()
        --> 이런식으로 and 조건도 사용가능. or 조건도 or_(tblsignup.UserEmail==Userid),(tblsignup.UserPassword==Userpass)로 사용가능
3. insert 문
    [변수] = [테이블명](테이블컬럼1 값, 테이블컬럼2 값)
    db.session.add([변수]) --> DB에 해당 데이터 추가
    db.session.commit()  --> 모든 DB작업은 commit을 해줘야 실제 DB에 적용됌. commit안하면 실제 적용 X

    ex) 테이블 이름이 crawling이고 컬럼이 TransSeq와 FromSaupjaRegNo 있다는 가정하에 진행하겠습니다.
        data = crawling(1,'사업장번호') / db.session.add(data) / db.session.commit()  --> 이렇게하면 1과 사업장번호라는 데이터가 저장됩니다.
        data = crawling(1) / db.session.add(data) / db.session.commit() --> 이렇게하면 1과 NULL (빈값) 이 저장됩니다.
        data = crawling(FromSaupjaRegNo = '사업장번호') / db.session.add(data) / db.session.commit() -->이렇게하면 직접적으로 데이터를 넣을 수 있습니다. 저장데이터 : (NULL, '사업장번호')

4. delete 문
    조건식으로 데이터 가져와 해당 데이터 삭제. (조건없이 query.all()하고 삭제시 전체 데이터 삭제)
    [변수] = [테이블명].query.filter([조건]).first() 또는 .all()
    db.session.delete([변수])
    db.session.commit()

5. update문
    위와 같이 변수에 데이터를 담아서 변수.컬럼명 = 변경할 값 하고서 commit으로 저장하면 변경됌
    
이 외에도 필요한 쿼리문 또는 문법이 있을경우 카카오톡으로 물어보면 추가 및 수정 조치하겠습니다.
* 아직 미완성임 월욜날 추가 업데이트 할 예정










